"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zodToJsonSchema = void 0;
const parseDef_1 = require("./parseDef");
const References_1 = require("./References");
const $schema = "http://json-schema.org/draft-07/schema#";
function zodToJsonSchema(schema, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    if (typeof options === "object") {
        return options.name === undefined
            ? options.target === "openApi3"
                ? (0, parseDef_1.parseDef)(schema._def, new References_1.References((_a = options.basePath) !== null && _a !== void 0 ? _a : ["#"], [], (_b = options.$refStrategy) !== null && _b !== void 0 ? _b : "root", options.effectStrategy, options.target, undefined, options.strictUnions))
                : Object.assign({ $schema }, (0, parseDef_1.parseDef)(schema._def, new References_1.References((_c = options.basePath) !== null && _c !== void 0 ? _c : ["#"], [], (_d = options.$refStrategy) !== null && _d !== void 0 ? _d : "root", options.effectStrategy, options.target, undefined, options.strictUnions)))
            : options.target === "openApi3"
                ? {
                    $ref: options.$refStrategy === "relative"
                        ? `0/${(_e = options.definitionPath) !== null && _e !== void 0 ? _e : "definitions"}/${options.name}`
                        : `#/${(_f = options.definitionPath) !== null && _f !== void 0 ? _f : "definitions"}/${options.name}`,
                    [(_g = options.definitionPath) !== null && _g !== void 0 ? _g : "definitions"]: {
                        [options.name]: (0, parseDef_1.parseDef)(schema._def, new References_1.References([
                            ...((_h = options.basePath) !== null && _h !== void 0 ? _h : ["#"]),
                            (_j = options.definitionPath) !== null && _j !== void 0 ? _j : "definitions",
                            options.name,
                        ], [], (_k = options.$refStrategy) !== null && _k !== void 0 ? _k : "root", options.effectStrategy, options.target, undefined, options.strictUnions)) || {},
                    },
                }
                : {
                    $schema,
                    $ref: options.$refStrategy === "relative"
                        ? `0/${(_l = options.definitionPath) !== null && _l !== void 0 ? _l : "definitions"}/${options.name}`
                        : `#/${(_m = options.definitionPath) !== null && _m !== void 0 ? _m : "definitions"}/${options.name}`,
                    [(_o = options.definitionPath) !== null && _o !== void 0 ? _o : "definitions"]: {
                        [options.name]: (0, parseDef_1.parseDef)(schema._def, new References_1.References([
                            ...((_p = options.basePath) !== null && _p !== void 0 ? _p : ["#"]),
                            (_q = options.definitionPath) !== null && _q !== void 0 ? _q : "definitions",
                            options.name,
                        ], [], (_r = options.$refStrategy) !== null && _r !== void 0 ? _r : "root", options.effectStrategy, options.target, undefined, options.strictUnions)) || {},
                    },
                };
    }
    else if (typeof options === "string") {
        const name = options;
        return {
            $schema,
            $ref: `#/definitions/${name}`,
            definitions: {
                [name]: (0, parseDef_1.parseDef)(schema._def, new References_1.References(["#", "definitions", name])) ||
                    {},
            },
        };
    }
    else {
        return Object.assign({ $schema }, (0, parseDef_1.parseDef)(schema._def, new References_1.References()));
    }
}
exports.zodToJsonSchema = zodToJsonSchema;
