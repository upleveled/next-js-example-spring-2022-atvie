"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEqual = exports.isOneOf = exports.isMemberExpression = exports.isTaggedTemplateExpression = exports.isCallExpression = exports.isIdentifier = exports.getSourceLocationFromStringPosition = void 0;
const utils_1 = require("@typescript-eslint/utils");
function getSourceLocationFromStringPosition(params) {
    var _a, _b;
    const valueUntilError = params.value.substring(0, params.position);
    const errorInLine = (_b = (_a = valueUntilError.match(/\n/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
    const errorFromColumn = valueUntilError.split(/\n/g)[errorInLine].length - 1;
    const errorToColumn = errorFromColumn +
        (() => {
            var _a, _b;
            const rest = params.value.split(/\n/g)[errorInLine].substring(errorFromColumn);
            const amountOfSpacesLeft = (_b = (_a = rest.match(/\s/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
            if (amountOfSpacesLeft > 0) {
                return rest.indexOf(" ");
            }
            return rest.length;
        })();
    if (errorInLine === 0) {
        return {
            start: {
                line: params.loc.start.line + errorInLine,
                column: params.loc.start.column + errorFromColumn + 1,
            },
            end: {
                line: params.loc.start.line + errorInLine,
                column: params.loc.start.column + errorToColumn + 1,
            },
        };
    }
    return {
        start: {
            line: params.loc.start.line + errorInLine,
            column: errorFromColumn,
        },
        end: {
            line: params.loc.start.line + errorInLine,
            column: errorToColumn,
        },
    };
}
exports.getSourceLocationFromStringPosition = getSourceLocationFromStringPosition;
function isIdentifier(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === utils_1.TSESTree.AST_NODE_TYPES.Identifier;
}
exports.isIdentifier = isIdentifier;
function isCallExpression(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === utils_1.TSESTree.AST_NODE_TYPES.CallExpression;
}
exports.isCallExpression = isCallExpression;
function isTaggedTemplateExpression(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === utils_1.TSESTree.AST_NODE_TYPES.TaggedTemplateExpression;
}
exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
function isMemberExpression(node) {
    return (node === null || node === void 0 ? void 0 : node.type) === utils_1.TSESTree.AST_NODE_TYPES.MemberExpression;
}
exports.isMemberExpression = isMemberExpression;
function isOneOf(value, options) {
    return options.includes(value);
}
exports.isOneOf = isOneOf;
function isEqual(value, expected) {
    return value === expected;
}
exports.isEqual = isEqual;
//# sourceMappingURL=estree.utils.js.map