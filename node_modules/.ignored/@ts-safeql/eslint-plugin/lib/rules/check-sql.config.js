"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineConfig = exports.getConfigFromFileWithContext = void 0;
const esbuild_1 = __importDefault(require("esbuild"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const fp_ts_1 = require("../utils/fp-ts");
const check_sql_rule_1 = require("./check-sql.rule");
function getConfigFromFileWithContext(params) {
    if (!isConfigFileRuleOptions(params.context.options[0])) {
        return params.context.options[0];
    }
    return (0, fp_ts_1.pipe)(getConfigFromFile(params.projectDir), fp_ts_1.E.getOrElseW((message) => {
        throw new Error(`safeql: ${message}`);
    }));
}
exports.getConfigFromFileWithContext = getConfigFromFileWithContext;
function getConfigFromFile(projectDir) {
    const configFilePath = path_1.default.join(projectDir, "safeql.config.ts");
    const tempFileName = `safeql.config.temp-${Date.now()}.js`;
    const tempFilePath = path_1.default.join(projectDir, tempFileName);
    const removeIfExists = (filePath) => {
        if (fs_1.default.existsSync(filePath)) {
            fs_1.default.unlinkSync(filePath);
        }
    };
    try {
        if (!fs_1.default.existsSync(configFilePath)) {
            throw new Error(`safeql.config.ts was not found at ${projectDir}`);
        }
        const result = esbuild_1.default.buildSync({
            entryPoints: [configFilePath],
            write: false,
            format: "cjs",
        });
        fs_1.default.writeFileSync(tempFilePath, result.outputFiles[0].text);
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const rawConfig = require(tempFilePath).default;
        if (rawConfig === undefined) {
            throw new Error(`safeql.config.ts must export a default value`);
        }
        const config = check_sql_rule_1.Config.safeParse(rawConfig);
        if (!config.success) {
            throw new Error(`safeql.config.ts is invalid: ${config.error.message}`);
        }
        return fp_ts_1.E.right(config.data);
    }
    catch (error) {
        return fp_ts_1.E.left(`${error}`);
    }
    finally {
        removeIfExists(tempFilePath);
    }
}
function isConfigFileRuleOptions(options) {
    return "useConfigFile" in options;
}
function defineConfig(config) {
    return config;
}
exports.defineConfig = defineConfig;
//# sourceMappingURL=check-sql.config.js.map