/**
 * https://transform.tools/json-to-typescript
 */
export declare namespace ParsedQuery {
    interface Root {
        version: number;
        stmts: Stmt[];
    }
    interface Stmt {
        stmt: Stmt2;
    }
    interface Stmt2 {
        SelectStmt?: SelectStmt;
    }
    interface SelectStmt {
        targetList?: TargetList[];
        fromClause?: FromClause[];
        whereClause?: WhereClause;
        sortClause?: SortClause[];
        limitCount?: LimitCount;
        limitOption?: string;
        op: string;
    }
    interface TargetList {
        ResTarget: ResTarget;
    }
    interface ResTarget {
        val: Val;
        location: number;
        name?: string;
    }
    interface Val {
        ColumnRef?: ColumnRef;
        A_Const?: AConst;
        FuncCall?: FuncCall;
        TypeCast?: TypeCast;
        CoalesceExpr?: CoalesceExpr;
        SubLink?: SubLink;
    }
    interface ColumnRef {
        fields: Field[];
        location: number;
    }
    interface Field {
        String?: String;
        A_Star?: AStar;
    }
    interface String {
        str: string;
    }
    interface AStar {
    }
    interface AConst {
        val: Val2;
        location: number;
    }
    interface Val2 {
        String?: String;
        Integer?: Integer;
    }
    interface Integer {
        ival: number;
    }
    interface FuncCall {
        funcname: Funcname[];
        args?: Arg[];
        location: number;
    }
    interface Funcname {
        String: String;
    }
    interface Arg {
        A_Const?: AConst2;
        ColumnRef?: ColumnRef2;
    }
    interface AConst2 {
        val: Val3;
        location: number;
    }
    interface Val3 {
        String: String;
    }
    interface ColumnRef2 {
        fields: Field2[];
        location: number;
    }
    interface Field2 {
        String: String;
    }
    interface TypeCast {
        arg: Arg2;
        typeName: TypeName;
        location: number;
    }
    interface Arg2 {
        A_Const: AConst3;
    }
    interface AConst3 {
        val: Val4;
        location: number;
    }
    interface Val4 {
        String: String;
    }
    interface TypeName {
        names: Name[];
        typemod: number;
        location: number;
    }
    interface Name {
        String: String;
    }
    interface CoalesceExpr {
        args: Arg3[];
        location: number;
    }
    interface Arg3 {
        ColumnRef: ColumnRef3;
    }
    interface ColumnRef3 {
        fields: Field3[];
        location: number;
    }
    interface Field3 {
        String: String;
    }
    interface FromClause {
        JoinExpr?: JoinExpr;
    }
    interface JoinExpr {
        jointype: "JOIN_INNER" | "JOIN_LEFT" | "JOIN_FULL" | "JOIN_RIGHT" | "JOIN_SEMI" | "JOIN_ANTI";
        larg?: Larg;
        rarg?: Rarg;
        quals?: Quals;
    }
    type LRarg = {
        JoinExpr?: JoinExpr;
        RangeVar?: RangeVar;
    };
    type Larg = LRarg;
    type Rarg = LRarg;
    interface RangeVar {
        relname: string;
        inh: boolean;
        relpersistence: string;
        location: number;
    }
    interface Quals {
        A_Expr: AExpr;
    }
    interface AExpr {
        kind: string;
        name: Name[];
        lexpr: Lexpr;
        rexpr: Rexpr;
        location: number;
    }
    interface Lexpr {
        ColumnRef: ColumnRef8;
    }
    interface ColumnRef8 {
        fields: Field8[];
        location: number;
    }
    interface Field8 {
        String: String;
    }
    interface Rexpr {
        ColumnRef: ColumnRef9;
    }
    interface ColumnRef9 {
        fields: Field9[];
        location: number;
    }
    interface Field9 {
        String: String;
    }
    interface WhereClause {
        BoolExpr: BoolExpr;
    }
    interface BoolExpr {
        boolop: string;
        args: Arg4[];
        location: number;
    }
    interface Arg4 {
        BoolExpr: BoolExpr2;
    }
    interface BoolExpr2 {
        boolop: string;
        args: Arg5[];
        location: number;
    }
    interface Arg5 {
        A_Expr?: AExpr4;
        NullTest?: NullTest;
        SubLink?: SubLink;
    }
    interface AExpr4 {
        kind: string;
        name: Name5[];
        lexpr: Lexpr4;
        rexpr: Rexpr4;
        location: number;
    }
    interface Name5 {
        String: String;
    }
    interface Lexpr4 {
        ColumnRef: ColumnRef10;
    }
    interface ColumnRef10 {
        fields: Field10[];
        location: number;
    }
    interface Field10 {
        String: String;
    }
    interface Rexpr4 {
        A_Const?: AConst4;
        ParamRef?: ParamRef;
        A_ArrayExpr?: AArrayExpr;
        FuncCall?: FuncCall2;
        List?: List;
    }
    interface AConst4 {
        val: Val5;
        location: number;
    }
    interface Val5 {
        String?: String;
        Integer?: Integer;
    }
    interface ParamRef {
        number: number;
        location: number;
    }
    interface AArrayExpr {
        elements: Element[];
        location: number;
    }
    interface Element {
        A_Const: AConst5;
    }
    interface AConst5 {
        val: Val6;
        location: number;
    }
    interface Val6 {
        Integer: Integer;
    }
    interface FuncCall2 {
        funcname: Funcname2[];
        args: Arg6[];
        location: number;
    }
    interface Funcname2 {
        String: String;
    }
    interface Arg6 {
        A_Const: AConst6;
    }
    interface AConst6 {
        val: Val7;
        location: number;
    }
    interface Val7 {
        String: String;
    }
    interface List {
        items: Item[];
    }
    interface Item {
        A_Const: AConst7;
    }
    interface AConst7 {
        val: Val8;
        location: number;
    }
    interface Val8 {
        Integer: Integer;
    }
    interface NullTest {
        arg: Arg7;
        nulltesttype: string;
        location: number;
    }
    interface Arg7 {
        ColumnRef: ColumnRef11;
    }
    interface ColumnRef11 {
        fields: Field11[];
        location: number;
    }
    interface Field11 {
        String: String;
    }
    interface SubLink {
        subLinkType: "EXISTS_SUBLINK" | "ALL_SUBLINK" | "ANY_SUBLINK" | "ROWCOMPARE_SUBLINK" | "EXPR_SUBLINK" | "MULTIEXPR_SUBLINK" | "ARRAY_SUBLINK" | "CTE_SUBLINK";
        testexpr: Testexpr;
        operName: OperName[];
        subselect: Subselect;
        location: number;
    }
    interface Testexpr {
        ColumnRef: ColumnRef12;
    }
    interface ColumnRef12 {
        fields: Field12[];
        location: number;
    }
    interface Field12 {
        String: String;
    }
    interface OperName {
        String: String;
    }
    interface Subselect {
        SelectStmt: SelectStmt;
    }
    interface SortClause {
        SortBy: SortBy;
    }
    interface SortBy {
        node: Node;
        sortby_dir: string;
        sortby_nulls: string;
        location: number;
    }
    interface Node {
        ColumnRef: ColumnRef14;
    }
    interface ColumnRef14 {
        fields: Field14[];
        location: number;
    }
    interface Field14 {
        String: String;
    }
    interface LimitCount {
        A_Const: AConst8;
    }
    interface AConst8 {
        val: Val10;
        location: number;
    }
    interface Val10 {
        Integer: Integer;
    }
}
