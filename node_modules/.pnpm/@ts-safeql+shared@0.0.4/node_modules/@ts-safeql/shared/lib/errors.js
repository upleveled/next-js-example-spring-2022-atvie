"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgresError = exports.DuplicateColumnsError = exports.InternalError = exports.InvalidQueryError = exports.InvalidMigrationError = exports.InvalidMigrationsPathError = exports.DatabaseInitializationError = void 0;
const path_1 = __importDefault(require("path"));
const postgres_1 = require("postgres");
class DatabaseInitializationError extends Error {
    constructor(message) {
        super(`Database initialization failed (${message})`);
        this._tag = "DatabaseInitializationError";
        this.message = message;
    }
    static of(pgError) {
        return new DatabaseInitializationError(pgError);
    }
    static to(error) {
        if (error instanceof Error) {
            return DatabaseInitializationError.of(error.message);
        }
        return DatabaseInitializationError.of("Unknown error");
    }
    toJSON() {
        return {
            _tag: this._tag,
            message: this.message,
        };
    }
}
exports.DatabaseInitializationError = DatabaseInitializationError;
class InvalidMigrationsPathError extends Error {
    constructor(migrationsPath, message) {
        super(`Failed to read migrations directory "${migrationsPath}" (${message})`);
        this._tag = "InvalidMigrationsPathError";
        this.migrationsPath = migrationsPath;
        this.message = message;
    }
    static of(filePath, pgError) {
        return new InvalidMigrationsPathError(filePath, pgError);
    }
    static fromErrorC(migrationsPath) {
        return (error) => InvalidMigrationsPathError.of(migrationsPath, error.message);
    }
    toJSON() {
        return {
            _tag: this._tag,
            migrationsPath: this.migrationsPath,
            message: this.message,
        };
    }
}
exports.InvalidMigrationsPathError = InvalidMigrationsPathError;
class InvalidMigrationError extends Error {
    constructor(filePath, message) {
        super(`Failed to run migration "${path_1.default.basename(filePath)}" (${message})`);
        this._tag = "InvalidMigrationError";
        this.filePath = filePath;
        this.message = message;
    }
    static of(filePath, pgError) {
        return new InvalidMigrationError(filePath, pgError);
    }
    static fromErrorC(migrationsPath) {
        return (error) => InvalidMigrationError.of(migrationsPath, error.message);
    }
    toJSON() {
        return {
            _tag: this._tag,
            filePath: this.filePath,
            message: this.message,
        };
    }
}
exports.InvalidMigrationError = InvalidMigrationError;
class InvalidQueryError extends Error {
    constructor(error, node) {
        super(error);
        this._tag = "InvalidQueryError";
        this.node = node;
    }
    static of(error, node) {
        return new InvalidQueryError(error, node);
    }
    toJSON() {
        return {
            _tag: this._tag,
            message: this.message,
            node: this.node,
        };
    }
}
exports.InvalidQueryError = InvalidQueryError;
class InternalError extends Error {
    constructor(error) {
        super(`Internal error: ${error}`);
        this._tag = "InternalError";
    }
    static of(error) {
        return new InternalError(error);
    }
    static to(error) {
        if (error instanceof Error) {
            return InternalError.of(error.message);
        }
        return InternalError.of("Unknown error");
    }
    toJSON() {
        return {
            _tag: this._tag,
            message: this.message,
        };
    }
}
exports.InternalError = InternalError;
class DuplicateColumnsError extends Error {
    constructor(params) {
        super(`Duplicate columns: ${params.columns.join(", ")}`);
        this._tag = "DuplicateColumnsError";
        this.columns = params.columns;
        this.queryText = params.queryText;
    }
    static of(params) {
        return new DuplicateColumnsError(params);
    }
    toJSON() {
        return {
            _tag: this._tag,
            columns: this.columns,
            queryText: this.queryText,
        };
    }
}
exports.DuplicateColumnsError = DuplicateColumnsError;
class PostgresError extends Error {
    constructor(params) {
        super(params.message);
        this._tag = "PostgresError";
        this.queryText = params.queryText;
        this.message = params.message;
        this.line = params.line;
        this.position = params.position;
    }
    static of(params) {
        return new PostgresError(params);
    }
    static to(query, error) {
        if (error instanceof postgres_1.PostgresError) {
            return PostgresError.of({
                queryText: query,
                message: error.message,
                line: error.line,
                position: error.position,
            });
        }
        return PostgresError.of({
            queryText: query,
            message: `${error}`,
            line: "1",
            position: "1",
        });
    }
    toJSON() {
        return {
            _tag: this._tag,
            queryText: this.queryText,
            message: this.message,
            line: this.line,
            position: this.position,
        };
    }
}
exports.PostgresError = PostgresError;
//# sourceMappingURL=errors.js.map