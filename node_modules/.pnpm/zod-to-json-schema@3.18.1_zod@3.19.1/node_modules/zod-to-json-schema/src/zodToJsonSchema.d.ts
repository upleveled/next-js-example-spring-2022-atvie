import { ZodSchema } from "zod";
import { JsonSchema7Type } from "./parseDef";
import { EffectStrategy } from "./References";
/**
 *
 * @param schema (ZodSchema) The Zod schema to be converted to a JSON schema.
 * @param name (string) The (optional) name of the schema. If provided, schema will be put in definitions/{name}
 */
declare function zodToJsonSchema<Name extends string | undefined = undefined>(schema: ZodSchema<any>, name?: Name): Name extends string ? {
    $schema: "http://json-schema.org/draft-07/schema#";
    $ref: `#/definitions/${Name}`;
    definitions: Record<Name, JsonSchema7Type>;
} : {
    $schema: "http://json-schema.org/draft-07/schema#";
} & JsonSchema7Type;
/**
 *
 * @param schema (ZodSchema) The Zod schema to be converted to a JSON schema.
 * @param options (Object) The (optional) options object.
 * @param options.name (string) The (optional) name of the schema. If provided, schema will be put in definitions/{name}
 * @param options.$refStrategy ("root" | "relative" | "none") The (optional) reference builder strategy. Default: "root"
 * @param options.basePath (string[]) The (optional) basePath for the root reference builder strategy. Default: [#]
 * @param options.effectStrategy ("input" | "any") The (optional) effect resolver strategy. Default: "input"
 * @param options.definitionPath ("definitions" | "$defs") defaults to definitions.
 * @param options.target ("jsonSchema7" | "openApi3") defaults to "jsonSchema7"
 * @param options.strictUnions (boolean) defaults to "false". Scrubs unions of any-like json schemas, like `{}` or `true`. Multiple zod types may result in these out of necessity, such as z.instanceof()
 *
 */
declare function zodToJsonSchema<Name extends string | undefined = undefined, Strategy extends "root" | "relative" | "none" | undefined = undefined, BasePath extends string[] | undefined = undefined, DefinitionPath extends "definitions" | "$defs" = "definitions", Target extends "jsonSchema7" | "openApi3" | undefined = undefined>(schema: ZodSchema<any>, options?: {
    name?: Name;
    $refStrategy?: Strategy;
    basePath?: BasePath;
    effectStrategy?: EffectStrategy;
    definitionPath?: DefinitionPath;
    target?: Target;
    strictUnions?: boolean;
}): Target extends "openApi3" ? Name extends string ? BasePath extends string[] ? {
    $ref: string;
} & Record<DefinitionPath, Record<Name, object>> : Strategy extends "relative" ? {
    $ref: `0/${DefinitionPath}/${Name}`;
} & Record<DefinitionPath, Record<Name, object>> : {
    $ref: `#/${DefinitionPath}/${Name}`;
} & Record<DefinitionPath, Record<Name, object>> : object : Name extends string ? BasePath extends string[] ? {
    $schema: "http://json-schema.org/draft-07/schema#";
    $ref: string;
} & Record<DefinitionPath, Record<Name, JsonSchema7Type>> : Strategy extends "relative" ? {
    $schema: "http://json-schema.org/draft-07/schema#";
    $ref: `0/${DefinitionPath}/${Name}`;
} & Record<DefinitionPath, Record<Name, JsonSchema7Type>> : {
    $schema: "http://json-schema.org/draft-07/schema#";
    $ref: `#/${DefinitionPath}/${Name}`;
} & Record<DefinitionPath, Record<Name, JsonSchema7Type>> : {
    $schema: "http://json-schema.org/draft-07/schema#";
} & JsonSchema7Type;
export { zodToJsonSchema };
