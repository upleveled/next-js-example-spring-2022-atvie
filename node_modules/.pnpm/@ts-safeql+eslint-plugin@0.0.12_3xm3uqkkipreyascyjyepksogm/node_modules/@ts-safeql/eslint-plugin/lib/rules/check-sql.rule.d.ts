import { TSESLint } from "@typescript-eslint/utils";
import z from "zod";
declare const messages: {
    typeInferenceFailed: string;
    error: string;
    invalidQuery: string;
    missingTypeAnnotations: string;
    incorrectTypeAnnotations: string;
    invalidTypeAnnotations: string;
};
export declare type RuleMessage = keyof typeof messages;
declare const RuleOptionConnection: z.ZodUnion<[z.ZodObject<z.extendShape<{
    /**
     * Transform the end result of the type.
     *
     * For example:
     *  - `"${type}[]"` will transform the type to an array
     *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
     *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
     */
    transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
    /**
     * Transform the (column) field key. Can be one of the following:
     * - `"snake"` - `user_id` → `userId`
     * - `"camel"` - `user_id` → `userId`
     * - `"pascal"` - `user_id` → `UserId`
     * - `"screaming snake"` - `user_id` → `USER_ID`
     */
    fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
    /**
     * Whether or not keep the connection alive. Change it only if you know what you're doing.
     */
    keepAlive: z.ZodOptional<z.ZodBoolean>;
    /**
     * Override defaults
     */
    overrides: z.ZodOptional<z.ZodObject<{
        types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }>>;
}, z.extendShape<{
    /**
     * The path where the migration files are located.
     */
    migrationsDir: z.ZodString;
    /**
     * THIS IS NOT THE PRODUCTION DATABASE.
     *
     * A connection url to the database.
     * This is required since in order to run the migrations, a connection to postgres is required.
     * Will be used only to create and drop the shadow database (see `databaseName`).
     */
    connectionUrl: z.ZodOptional<z.ZodString>;
    /**
     * The name of the shadow database that will be created from the migration files.
     */
    databaseName: z.ZodString;
}, {
    /**
     * The name of the variable the holds the connection.
     *
     * For example "conn" for `conn.query(...)`
     */
    name: z.ZodString;
    /**
     * An array of operator names that executes raw queries inside the variable that holds the connection.
     *
     * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
     */
    operators: z.ZodArray<z.ZodString, "many">;
}>>, "strip", z.ZodTypeAny, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    connectionUrl?: string | undefined;
    name: string;
    migrationsDir: string;
    databaseName: string;
    operators: string[];
}, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    connectionUrl?: string | undefined;
    name: string;
    migrationsDir: string;
    databaseName: string;
    operators: string[];
}>, z.ZodObject<z.extendShape<{
    /**
     * Transform the end result of the type.
     *
     * For example:
     *  - `"${type}[]"` will transform the type to an array
     *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
     *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
     */
    transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
    /**
     * Transform the (column) field key. Can be one of the following:
     * - `"snake"` - `user_id` → `userId`
     * - `"camel"` - `user_id` → `userId`
     * - `"pascal"` - `user_id` → `UserId`
     * - `"screaming snake"` - `user_id` → `USER_ID`
     */
    fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
    /**
     * Whether or not keep the connection alive. Change it only if you know what you're doing.
     */
    keepAlive: z.ZodOptional<z.ZodBoolean>;
    /**
     * Override defaults
     */
    overrides: z.ZodOptional<z.ZodObject<{
        types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }>>;
}, z.extendShape<{
    /**
     * The path where the migration files are located.
     */
    migrationsDir: z.ZodString;
    /**
     * THIS IS NOT THE PRODUCTION DATABASE.
     *
     * A connection url to the database.
     * This is required since in order to run the migrations, a connection to postgres is required.
     * Will be used only to create and drop the shadow database (see `databaseName`).
     */
    connectionUrl: z.ZodOptional<z.ZodString>;
    /**
     * The name of the shadow database that will be created from the migration files.
     */
    databaseName: z.ZodString;
}, {
    /**
     * The name of the tag that executes raw queries.
     *
     * For example "sql" for ```` sql`SELECT * FROM users`  ````
     */
    tagName: z.ZodString;
}>>, "strip", z.ZodTypeAny, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    connectionUrl?: string | undefined;
    tagName: string;
    migrationsDir: string;
    databaseName: string;
}, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    connectionUrl?: string | undefined;
    tagName: string;
    migrationsDir: string;
    databaseName: string;
}>, z.ZodObject<z.extendShape<{
    /**
     * Transform the end result of the type.
     *
     * For example:
     *  - `"${type}[]"` will transform the type to an array
     *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
     *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
     */
    transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
    /**
     * Transform the (column) field key. Can be one of the following:
     * - `"snake"` - `user_id` → `userId`
     * - `"camel"` - `user_id` → `userId`
     * - `"pascal"` - `user_id` → `UserId`
     * - `"screaming snake"` - `user_id` → `USER_ID`
     */
    fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
    /**
     * Whether or not keep the connection alive. Change it only if you know what you're doing.
     */
    keepAlive: z.ZodOptional<z.ZodBoolean>;
    /**
     * Override defaults
     */
    overrides: z.ZodOptional<z.ZodObject<{
        types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }>>;
}, z.extendShape<{
    /**
     * The connection url to the database
     */
    databaseUrl: z.ZodString;
}, {
    /**
     * The name of the variable the holds the connection.
     *
     * For example "conn" for `conn.query(...)`
     */
    name: z.ZodString;
    /**
     * An array of operator names that executes raw queries inside the variable that holds the connection.
     *
     * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
     */
    operators: z.ZodArray<z.ZodString, "many">;
}>>, "strip", z.ZodTypeAny, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    name: string;
    operators: string[];
    databaseUrl: string;
}, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    name: string;
    operators: string[];
    databaseUrl: string;
}>, z.ZodObject<z.extendShape<{
    /**
     * Transform the end result of the type.
     *
     * For example:
     *  - `"${type}[]"` will transform the type to an array
     *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
     *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
     */
    transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
    /**
     * Transform the (column) field key. Can be one of the following:
     * - `"snake"` - `user_id` → `userId`
     * - `"camel"` - `user_id` → `userId`
     * - `"pascal"` - `user_id` → `UserId`
     * - `"screaming snake"` - `user_id` → `USER_ID`
     */
    fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
    /**
     * Whether or not keep the connection alive. Change it only if you know what you're doing.
     */
    keepAlive: z.ZodOptional<z.ZodBoolean>;
    /**
     * Override defaults
     */
    overrides: z.ZodOptional<z.ZodObject<{
        types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }, {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    }>>;
}, z.extendShape<{
    /**
     * The connection url to the database
     */
    databaseUrl: z.ZodString;
}, {
    /**
     * The name of the tag that executes raw queries.
     *
     * For example "sql" for ```` sql`SELECT * FROM users`  ````
     */
    tagName: z.ZodString;
}>>, "strip", z.ZodTypeAny, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    tagName: string;
    databaseUrl: string;
}, {
    transform?: string | (string | [string, string])[] | undefined;
    fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
    keepAlive?: boolean | undefined;
    overrides?: {
        types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
    } | undefined;
    tagName: string;
    databaseUrl: string;
}>]>;
export declare type RuleOptionConnection = z.infer<typeof RuleOptionConnection>;
export declare const Config: z.ZodObject<{
    connections: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }>]>, "many">, z.ZodUnion<[z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }>]>]>;
}, "strip", z.ZodTypeAny, {
    connections: {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    } | ({
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    })[];
}, {
    connections: {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    } | ({
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    })[];
}>;
export declare type Config = z.infer<typeof Config>;
export declare const UserConfigFile: z.ZodObject<{
    useConfigFile: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    useConfigFile: boolean;
}, {
    useConfigFile: boolean;
}>;
export declare type UserConfigFile = z.infer<typeof UserConfigFile>;
export declare const Options: z.ZodUnion<[z.ZodObject<{
    connections: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }>]>, "many">, z.ZodUnion<[z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }>]>]>;
}, "strip", z.ZodTypeAny, {
    connections: {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    } | ({
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    })[];
}, {
    connections: {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    } | ({
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    })[];
}>, z.ZodObject<{
    useConfigFile: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    useConfigFile: boolean;
}, {
    useConfigFile: boolean;
}>]>;
export declare type Options = z.infer<typeof Options>;
export declare const RuleOptions: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    connections: z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }>]>, "many">, z.ZodUnion<[z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The path where the migration files are located.
         */
        migrationsDir: z.ZodString;
        /**
         * THIS IS NOT THE PRODUCTION DATABASE.
         *
         * A connection url to the database.
         * This is required since in order to run the migrations, a connection to postgres is required.
         * Will be used only to create and drop the shadow database (see `databaseName`).
         */
        connectionUrl: z.ZodOptional<z.ZodString>;
        /**
         * The name of the shadow database that will be created from the migration files.
         */
        databaseName: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the variable the holds the connection.
         *
         * For example "conn" for `conn.query(...)`
         */
        name: z.ZodString;
        /**
         * An array of operator names that executes raw queries inside the variable that holds the connection.
         *
         * For example ["$queryRaw", "$executeRaw"] for `Prisma.$queryRaw(...)` and `Prisma.$executeRaw(...)`
         */
        operators: z.ZodArray<z.ZodString, "many">;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    }>, z.ZodObject<z.extendShape<{
        /**
         * Transform the end result of the type.
         *
         * For example:
         *  - `"${type}[]"` will transform the type to an array
         *  - `["Nullable", "Maybe"]` will replace `Nullable` with `Maybe` in the type
         *  - `["${type}[]", ["Nullable", "Maybe"]]` will do both
         */
        transform: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodTuple<[z.ZodString, z.ZodString], null>]>, "many">]>>;
        /**
         * Transform the (column) field key. Can be one of the following:
         * - `"snake"` - `user_id` → `userId`
         * - `"camel"` - `user_id` → `userId`
         * - `"pascal"` - `user_id` → `UserId`
         * - `"screaming snake"` - `user_id` → `USER_ID`
         */
        fieldTransform: z.ZodOptional<z.ZodEnum<["snake", "pascal", "camel", "screaming snake"]>>;
        /**
         * Whether or not keep the connection alive. Change it only if you know what you're doing.
         */
        keepAlive: z.ZodOptional<z.ZodBoolean>;
        /**
         * Override defaults
         */
        overrides: z.ZodOptional<z.ZodObject<{
            types: z.ZodOptional<z.ZodRecord<z.ZodEnum<["bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", ...("bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea")[]]>, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }, {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        }>>;
    }, z.extendShape<{
        /**
         * The connection url to the database
         */
        databaseUrl: z.ZodString;
    }, {
        /**
         * The name of the tag that executes raw queries.
         *
         * For example "sql" for ```` sql`SELECT * FROM users`  ````
         */
        tagName: z.ZodString;
    }>>, "strip", z.ZodTypeAny, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }, {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    }>]>]>;
}, "strip", z.ZodTypeAny, {
    connections: {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    } | ({
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    })[];
}, {
    connections: {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    } | ({
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    })[];
}>, z.ZodObject<{
    useConfigFile: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    useConfigFile: boolean;
}, {
    useConfigFile: boolean;
}>]>, "many">;
export declare type RuleOptions = z.infer<typeof RuleOptions>;
export declare type RuleContext = Readonly<TSESLint.RuleContext<RuleMessage, RuleOptions>>;
declare const _default: TSESLint.RuleModule<"error" | "typeInferenceFailed" | "invalidQuery" | "missingTypeAnnotations" | "incorrectTypeAnnotations" | "invalidTypeAnnotations", ({
    connections: {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    } | ({
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        name: string;
        migrationsDir: string;
        databaseName: string;
        operators: string[];
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        connectionUrl?: string | undefined;
        tagName: string;
        migrationsDir: string;
        databaseName: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        name: string;
        operators: string[];
        databaseUrl: string;
    } | {
        transform?: string | (string | [string, string])[] | undefined;
        fieldTransform?: "snake" | "camel" | "pascal" | "screaming snake" | undefined;
        keepAlive?: boolean | undefined;
        overrides?: {
            types?: Partial<Record<"bigint" | "boolean" | "void" | "text" | "int" | "float" | "date" | "int2" | "int4" | "int8" | "smallint" | "real" | "float4" | "float8" | "numeric" | "decimal" | "smallserial" | "serial" | "bigserial" | "uuid" | "varchar" | "char" | "bpchar" | "citext" | "bit" | "bool" | "timestamp" | "timestamptz" | "time" | "timetz" | "interval" | "inet" | "cidr" | "macaddr" | "macaddr8" | "money" | "json" | "jsonb" | "bytea", string>> | undefined;
        } | undefined;
        tagName: string;
        databaseUrl: string;
    })[];
} | {
    useConfigFile: boolean;
})[], TSESLint.RuleListener>;
export default _default;
