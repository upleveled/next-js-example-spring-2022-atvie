import { GenerateResult } from "@ts-safeql/generate";
import { DuplicateColumnsError, InvalidQueryError, PostgresError } from "@ts-safeql/shared";
import { TSESTree } from "@typescript-eslint/utils";
import { RuleContext } from "./check-sql.rule";
import { WorkerError } from "./check-sql.worker";
declare type TypeReplacerString = string;
declare type TypeReplacerFromTo = [string, string];
declare type TypeTransformer = TypeReplacerString | (TypeReplacerString | TypeReplacerFromTo)[];
/**
 * Takes a generated result and a transform type and returns a result with the
 * transformed type.
 *
 * @param transform could be either:
 *  - a string that has ${type} in it,
 *  - an array of tuples that behave as [valueToBeReplaced, typeToReplaceWith]
 *  - an array that has a mix of the above (such as ["${type}[]", ["Nullable", "Maybe"]])
 */
export declare function withTransformType(result: GenerateResult, transform?: TypeTransformer): GenerateResult;
export declare function reportInvalidQueryError(params: {
    context: RuleContext;
    error: InvalidQueryError;
}): void;
export declare function reportBaseError(params: {
    context: RuleContext;
    tag: TSESTree.TaggedTemplateExpression;
    error: WorkerError;
}): void;
export declare function reportDuplicateColumns(params: {
    tag: TSESTree.TaggedTemplateExpression;
    context: RuleContext;
    error: DuplicateColumnsError;
}): void;
export declare function reportPostgresError(params: {
    context: RuleContext;
    tag: TSESTree.TaggedTemplateExpression;
    error: PostgresError;
}): void;
export declare function reportMissingTypeAnnotations(params: {
    context: RuleContext;
    tag: TSESTree.TaggedTemplateExpression;
    baseNode: TSESTree.BaseNode;
    result: GenerateResult;
}): void;
export declare function reportIncorrectTypeAnnotations(params: {
    context: RuleContext;
    result: GenerateResult;
    typeParameter: TSESTree.TSTypeParameterInstantiation;
    expected: string | null;
    actual: string | null;
}): void;
export declare function reportInvalidTypeAnnotations(params: {
    context: RuleContext;
    typeParameter: TSESTree.TSTypeParameterInstantiation;
}): void;
export {};
