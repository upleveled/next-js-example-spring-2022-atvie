export declare function isDefined<T>(value: T | null | undefined): value is NonNullable<T>;
export declare function fmap<T, R>(v: T | null | undefined, predicate: (v: T) => R): R | null;
export declare function validateOneOf<T>(value: unknown, possibilies: readonly T[]): T;
declare type GroupedBy<T, K> = K extends [infer K0, ...infer KR] ? Map<T[Extract<K0, keyof T>], GroupedBy<T, KR>> : T[];
export declare function groupBy<T, K extends Array<keyof T>>(objects: readonly T[], ...by: [...K]): GroupedBy<T, K>;
declare type NonEmptyArray<T> = readonly [T, ...ReadonlyArray<T>];
export declare function isNonEmpty<T>(array: ReadonlyArray<T> | undefined): array is NonEmptyArray<T>;
export declare function objectKeys<T extends object>(obj: T): (keyof T)[];
export declare function objectKeysNonEmpty<T extends object>(obj: T): [keyof T, ...(keyof T)[]];
export declare function assertNever(caseType: never): never;
export {};
