import { TSESTree } from "@typescript-eslint/types";
export declare class DatabaseInitializationError extends Error {
    _tag: "DatabaseInitializationError";
    constructor(message: string);
    static of(pgError: string): DatabaseInitializationError;
    static to(error: unknown): DatabaseInitializationError;
    toJSON(): {
        _tag: "DatabaseInitializationError";
        message: string;
    };
}
export declare class InvalidMigrationsPathError extends Error {
    _tag: "InvalidMigrationsPathError";
    migrationsPath: string;
    constructor(migrationsPath: string, message: string);
    static of(filePath: string, pgError: string): InvalidMigrationsPathError;
    static fromErrorC(migrationsPath: string): (error: Error) => InvalidMigrationsPathError;
    toJSON(): {
        _tag: "InvalidMigrationsPathError";
        migrationsPath: string;
        message: string;
    };
}
export declare class InvalidMigrationError extends Error {
    _tag: "InvalidMigrationError";
    filePath: string;
    constructor(filePath: string, message: string);
    static of(filePath: string, pgError: string): InvalidMigrationError;
    static fromErrorC(migrationsPath: string): (error: Error) => InvalidMigrationError;
    toJSON(): {
        _tag: "InvalidMigrationError";
        filePath: string;
        message: string;
    };
}
export declare class InvalidQueryError extends Error {
    _tag: "InvalidQueryError";
    node: TSESTree.Expression;
    constructor(error: string, node: TSESTree.Expression);
    static of(error: string, node: TSESTree.Expression): InvalidQueryError;
    toJSON(): {
        _tag: "InvalidQueryError";
        message: string;
        node: TSESTree.Expression;
    };
}
export declare class InternalError extends Error {
    _tag: "InternalError";
    constructor(error: string);
    static of(error: string): InternalError;
    static to(error: unknown): InternalError;
    toJSON(): {
        _tag: "InternalError";
        message: string;
    };
}
export declare class DuplicateColumnsError extends Error {
    _tag: "DuplicateColumnsError";
    columns: string[];
    queryText: string;
    constructor(params: {
        columns: string[];
        queryText: string;
    });
    static of(params: {
        columns: string[];
        queryText: string;
    }): DuplicateColumnsError;
    toJSON(): {
        _tag: "DuplicateColumnsError";
        columns: string[];
        queryText: string;
    };
}
export declare class PostgresError extends Error {
    _tag: "PostgresError";
    queryText: string;
    message: string;
    line: string;
    position: string;
    constructor(params: {
        queryText: string;
        message: string;
        line: string;
        position: string;
    });
    static of(params: {
        queryText: string;
        message: string;
        line: string;
        position: string;
    }): PostgresError;
    static to(query: string, error: unknown): PostgresError;
    toJSON(): {
        _tag: "PostgresError";
        queryText: string;
        message: string;
        line: string;
        position: string;
    };
}
