"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNever = exports.objectKeysNonEmpty = exports.objectKeys = exports.isNonEmpty = exports.groupBy = exports.validateOneOf = exports.fmap = exports.isDefined = void 0;
function isDefined(value) {
    return value !== undefined && value !== null;
}
exports.isDefined = isDefined;
function fmap(v, predicate) {
    if (!isDefined(v)) {
        return null;
    }
    return predicate(v);
}
exports.fmap = fmap;
function validateOneOf(value, possibilies) {
    const valueAsT = value;
    if (!possibilies.includes(valueAsT)) {
        throw new Error(`validation of validateOneOf failed. Expected "${value}" to be one of "${possibilies.join(", ")}"`);
    }
    return valueAsT;
}
exports.validateOneOf = validateOneOf;
function groupBy(objects, ...by) {
    if (by.length === 0) {
        return objects;
    }
    const [k0, ...kr] = by;
    const topLevelGroups = new Map();
    for (const obj of objects) {
        const k = obj[k0];
        let arr = topLevelGroups.get(k);
        if (!arr) {
            arr = [];
            topLevelGroups.set(k, arr);
        }
        arr.push(obj);
    }
    return new Map(Array.from(topLevelGroups, ([k, v]) => [k, groupBy(v, ...kr)]));
}
exports.groupBy = groupBy;
function isNonEmpty(array) {
    return array !== undefined && array.length > 0;
}
exports.isNonEmpty = isNonEmpty;
function objectKeys(obj) {
    return Object.keys(obj);
}
exports.objectKeys = objectKeys;
function objectKeysNonEmpty(obj) {
    const keys = objectKeys(obj);
    if (keys.length === 0) {
        throw new Error("expected non-empty object");
    }
    return keys;
}
exports.objectKeysNonEmpty = objectKeysNonEmpty;
function assertNever(caseType) {
    throw new Error(`assertNever: ${caseType}`);
}
exports.assertNever = assertNever;
//# sourceMappingURL=common.js.map