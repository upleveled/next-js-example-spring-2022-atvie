"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLeftJoinTablesTE = void 0;
const shared_1 = require("@ts-safeql/shared");
const assert_1 = __importDefault(require("assert"));
const fp_ts_1 = require("fp-ts");
const function_1 = require("fp-ts/lib/function");
const libpg_query_1 = __importDefault(require("libpg-query"));
const mocha_1 = require("mocha");
const getLeftJoinTables_1 = require("./getLeftJoinTables");
const cases = [
    {
        query: "SELECT * FROM caregiver",
        expected: [],
    },
    {
        query: "SELECT * FROM caregiver LEFT JOIN agency ON caregiver.id = agency.id",
        expected: ["agency"],
    },
    {
        query: `
        SELECT
            caregiver.id as caregiver_id,
            caregiver_agency.id as assoc_id
        FROM caregiver
            LEFT JOIN caregiver_agency ON caregiver.id = caregiver_agency.caregiver_id
            LEFT JOIN agency ON caregiver_agency.agency_id = agency.id
    `,
        expected: ["agency", "caregiver_agency"],
    },
];
exports.getLeftJoinTablesTE = (0, function_1.flow)(libpg_query_1.default.parseQuery, fp_ts_1.taskEither.tryCatchK(function_1.identity, shared_1.InternalError.to), fp_ts_1.taskEither.map(getLeftJoinTables_1.getLeftJoinTablesFromParsed));
for (const { query, expected } of cases) {
    (0, mocha_1.test)(`getLeftJoinTables: ${query}`, async () => {
        return (0, function_1.pipe)((0, exports.getLeftJoinTablesTE)(query), fp_ts_1.taskEither.match((error) => assert_1.default.fail(error.message), (result) => assert_1.default.deepEqual(result, expected)))();
    });
}
//# sourceMappingURL=getLeftJoinTables.test.js.map