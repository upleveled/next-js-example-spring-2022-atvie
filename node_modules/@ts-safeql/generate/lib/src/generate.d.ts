import { DuplicateColumnsError, IdentiferCase, ParsedQuery, PostgresError } from "@ts-safeql/shared";
import { Either } from "fp-ts/lib/Either";
import postgres from "postgres";
import "source-map-support/register";
import { ColType } from "./utils/colTypes";
declare type CacheKey = string;
declare type JSToPostgresTypeMap = Record<string, unknown>;
declare type Sql = postgres.Sql<JSToPostgresTypeMap>;
export declare type GenerateResult = {
    result: string | null;
    stmt: postgres.Statement;
    query: string;
};
export declare type GenerateError = DuplicateColumnsError | PostgresError;
export declare function getMetadataFromCacheOrFetch(sql: Sql, cacheKey: CacheKey): Promise<{
    pgTypes: postgres.RowList<PgTypeRow[]>;
    pgCols: PgColRow[];
    pgColsByTableOidCache: Map<number, PgColRow[]>;
}>;
export interface GenerateParams {
    sql: Sql;
    query: string;
    pgParsed: ParsedQuery.Root;
    cacheMetadata?: boolean;
    cacheKey: string;
    fieldTransform: IdentiferCase | undefined;
    overrides?: Partial<{
        types: Record<string, string>;
    }>;
}
export declare function generate(params: GenerateParams): Promise<Either<GenerateError, GenerateResult>>;
interface PgTypeRow {
    oid: number;
    name: ColType;
}
interface PgColRow {
    tableOid: number;
    tableName: string;
    colName: string;
    colType: ColType;
    colNum: number;
    colHasDef: boolean;
    colNotNull: boolean;
}
export {};
